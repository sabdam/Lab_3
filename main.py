def res():
    import numpy as np
    import matplotlib.pyplot as plt
    import math

    def surface_plot(matrix, **kwargs):
        (x, y) = np.meshgrid(np.arange(matrix.shape[0]), np.arange(matrix.shape[1]))
        fig = plt.figure(figsize=(10, 6))
        ax = fig.add_subplot(111, projection='3d')
        ax.set_zlim(0, 400)
        ax.view_init(20, -120)
        surf = ax.plot_surface(x, y, matrix, **kwargs)
        return (fig, ax, surf)

    # исходная матрица
    input_array = [[8, 22, 35, 55, 64, 89, 107, 133, 135, 113, 101, 89, 79, 56, 42],
                    [20, 40, 65, 93, 88, 145, 136, 227, 163, 165, 147, 123, 128, 105, 65],
                    [18, 45, 79, 88, 110, 145, 209, 245, 248, 247, 199, 180, 162, 127, 60],
                    [18, 63, 102, 135, 184, 248, 285, 375, 400, 362, 247, 217, 185, 120, 67],
                    [34, 96, 168, 201, 261, 312, 384, 468, 448, 344, 280, 266, 211, 166, 48],
                    [30, 77, 163, 244, 287, 392, 500, 550, 516, 504, 389, 352, 283, 190, 15],
                    [12, 80, 167, 241, 366, 449, 515, 550, 563, 470, 337, 310, 237, 126, 15],
                    [40, 137, 206, 328, 433, 491, 558, 669, 668, 522, 490, 408, 269, 147, 76],
                    [32, 96, 188, 241, 321, 302, 440, 565, 499, 463, 391, 254, 146, 107, 45],
                    [6, 63, 142, 214, 299, 386, 453, 463, 471, 365, 274, 241, 132, 80, 25],
                    [12, 51, 116, 171, 300, 320, 336, 394, 359, 299, 240, 219, 108, 34, 30],
                    [22, 50, 82, 151, 195, 245, 304, 355, 290, 233, 204, 74, 55, 48, 12],
                    [0, 12, 59, 93, 128, 173, 236, 211, 196, 170, 140, 71, 76, 65, 0],
                    [0, 26, 46, 73, 102, 116, 121, 108, 126, 84, 78, 49, 10, 15, 0],
                    [8, 16, 28, 28, 52, 52, 52, 72, 64, 56, 44, 44, 20, 20, 20]]

    # матрица с точесеными помехами
    noise_array = [[8, 22, 35, 55, 64, 89, 107, 133, 135, 113, 101, 89, 79, 56, 42],
                    [20, 40, 65, 93, 88, 145, 136, 227, 163, 165, 147, 123, 128, 105, 65],
                    [18, 45, 79, 88, 110, 145, 209, 245, 248, 247, 199, 180, 162, 127, 60],
                    [18, 63, 102, 135, 184, 248, 285, 375, 400, 362, 247, 217, 185, 120, 67],
                    [34, 96, 168, 400, 261, 312, 384, 468, 448, 344, 280, 266, 211, 166, 48],
                    [30, 77, 163, 244, 287, 392, 500, 550, 516, 504, 389, 352, 283, 190, 15],
                    [12, 80	, 167, 241, 366, 449, 515, 550, 563, 470, 600, 310, 237, 126, 15],
                    [40, 137, 206, 328, 433, 491, 558, 669, 668, 522, 490, 408, 269, 147, 76],
                    [32, 96, 188, 241, 321, 302, 440, 565, 499, 463, 391, 254, 146, 107, 45],
                    [6, 63, 142, 214, 299, 386, 453, 463, 471, 365, 274, 241, 132, 80, 25],
                    [12, 51, 116, 171, 300, 320, 336, 394, 359, 299, 240, 219, 108, 34, 30],
                    [22, 50, 82, 151, 195, 245, 304, 355, 290, 233, 204, 74, 55, 48, 12],
                    [0, 12, 59, 93, 128, 173, 236, 211, 196, 170, 140, 71, 76, 65, 0],
                    [0, 26, 46, 73, 102, 116, 121, 108, 126, 84, 78, 49, 10, 15, 0],
                    [8, 16, 28, 28, 52, 52, 52, 72, 64, 56, 44, 44, 20, 20, 20]]

    #Анизатропная фильтрация

    filter_array = [[1, 1, 1],
                    [1, 3, 1],
                    [1, 1, 1]]
    filter_fraction = 11

    # обнуление матрицы после фильтрации и матрицы разницы между исходной и после фильтрации
    signal_array = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

    difference_array = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

    for i in range(0, 15):
        for j in range(0, 15):
            if i == 0 or i == 14 or j == 0 or j == 14:
                signal_array[i][j] = noise_array[i][j]
            else:
                signal_tmp = 0
                for k in range(-1, 2):
                    for l in range(-1, 2):
                        signal_tmp += filter_array[k][l] * noise_array[i + k][j + l]
                signal_array[i][j] = signal_tmp // filter_fraction

    for i in range(0, 15):
        for j in range(0, 15):
            difference_array[i][j] = input_array[i][j] - signal_array[i][j]

    # отрисовка графиков
    plt.figure(figsize=(6, 6))
    plt.title('Сигнала до применения фильтров (сигнал с шумом):')
    plt.imshow(np.array(noise_array), interpolation='nearest', origin='lower')
    plt.show()

    (fig, ax, surf) = surface_plot(np.array(noise_array))
    plt.title('Сигнала до применения фильтров (сигнал с шумом):')
    plt.show()

    plt.figure(figsize=(6, 6))
    plt.title('Сигнала после применения анизотропного фильтра:')
    plt.imshow(np.array(signal_array), interpolation='nearest', origin='lower')
    plt.show()

    (fig, ax, surf) = surface_plot(np.array(signal_array))
    plt.title('Сигнала после применения анизотропного фильтра:')
    plt.show()

    plt.figure(figsize=(6, 6))
    plt.title('Разница между исх. с. и с. после применения а. ф.:')
    plt.imshow(np.array(difference_array), interpolation='nearest', origin='lower')
    plt.show()

    (fig, ax, surf) = surface_plot(np.array(difference_array))
    plt.title('Разница между исх.с. и с. после применения а. ф.:')
    plt.show()

    #Метод статической пороговой фильтрации

    m = 1.31
    N = 3

    # обнуление матрицы после фильтрации и матрицы разницы между исходной и после фильтрации
    signal_array = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

    difference_array = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

    for i in range(0, 15):
        for j in range(0, 15):
            sum_g = 0
            sum_d = 0.0

            for k in range(-(N - 1) // 2, (N - 1) // 2 + 1):
                for l in range(-(N - 1) // 2, (N - 1) // 2 + 1):
                    sum_g += noise_array[i + k - 1][j + l - 1]

            g = sum_g / (N ** 2)

            for k in range(-(N - 1) // 2, (N - 1) // 2 + 1):
                for l in range(-(N - 1) // 2, (N - 1) // 2 + 1):
                    sum_d += (noise_array[i + k - 1][j + l - 1] - g) ** 2

            d = sum_d / (N ** 2 - 1)

            if abs(noise_array[i][j] - g) <= (m * math.sqrt(d)):
                signal_array[i][j] = noise_array[i][j]
            else:
                signal_array[i][j] = int(g)

    # отрисовка графиков
    plt.figure(figsize=(6, 6))
    plt.title('Сигнала после применения статического порогового фильтра:')
    plt.imshow(np.array(signal_array), interpolation='nearest', origin='lower')
    plt.show()

    (fig, ax, surf) = surface_plot(np.array(signal_array))
    plt.title('Сигнала после применения статического порогового фильтра:')
    plt.show()

    for i in range(0, 15):
        for j in range(0, 15):
            difference_array[i][j] = input_array[i][j] - signal_array[i][j]

    plt.figure(figsize=(6, 6))
    plt.title('Разница между исх. с. и с. после применения ст. п. ф.:')
    plt.imshow(np.array(difference_array), interpolation='nearest', origin='lower')
    plt.show()

    (fig, ax, surf) = surface_plot(np.array(difference_array))
    plt.title('Разница между исх. с. и сигналом после применения ст. п. ф.:')
    plt.show()


if __name__ == '__main__':
    res()

